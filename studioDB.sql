-- MySQL Script generated by MySQL Workbench
-- Wed Nov 18 22:15:17 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema studio
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema studio
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `studio` DEFAULT CHARACTER SET utf8 ;
USE `studio` ;

-- -----------------------------------------------------
-- Table `studio`.`customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `studio`.`customer` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `surname` VARCHAR(45) NOT NULL,
  `telnum` VARCHAR(17) NOT NULL,
  `mail` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `studio`.`typeofcloth`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `studio`.`typeofcloth` (
  `name` VARCHAR(45) NOT NULL,
  `days` INT NOT NULL,
  `price` DECIMAL(10,2) NOT NULL,
  PRIMARY KEY (`name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `studio`.`master`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `studio`.`master` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `surname` VARCHAR(45) NOT NULL,
  `address` VARCHAR(45) NOT NULL,
  `telnum` VARCHAR(17) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `studio`.`order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `studio`.`order` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `date` DATE NOT NULL,
  `master_id` INT NOT NULL,
  `customer_id` INT NOT NULL,
  `typeofcloth_name` VARCHAR(45) NOT NULL,
  `done` TINYINT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `fk_order_master_idx` (`master_id` ASC) VISIBLE,
  INDEX `fk_order_customer1_idx` (`customer_id` ASC) VISIBLE,
  INDEX `fk_order_typeofcloth1_idx` (`typeofcloth_name` ASC) VISIBLE,
  CONSTRAINT `fk_order_master`
    FOREIGN KEY (`master_id`)
    REFERENCES `studio`.`master` (`id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `fk_order_customer1`
    FOREIGN KEY (`customer_id`)
    REFERENCES `studio`.`customer` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_order_typeofcloth1`
    FOREIGN KEY (`typeofcloth_name`)
    REFERENCES `studio`.`typeofcloth` (`name`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `studio`.`material`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `studio`.`material` (
  `name` VARCHAR(45) NOT NULL,
  `price` DECIMAL(10,2) NOT NULL,
  `quantity` INT NOT NULL,
  PRIMARY KEY (`name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `studio`.`hardware`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `studio`.`hardware` (
  `name` VARCHAR(45) NOT NULL,
  `price` DECIMAL(10,2) NOT NULL,
  `quantity` INT NOT NULL,
  PRIMARY KEY (`name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `studio`.`material_order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `studio`.`material_order` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `quantity` INT NOT NULL,
  `material_name` VARCHAR(45) NOT NULL,
  `order_id` INT NOT NULL,
  INDEX `mo_order_id_idx` (`order_id` ASC) VISIBLE,
  INDEX `mo_material_name_idx` (`material_name` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  CONSTRAINT `mo_order_id_idx`
    FOREIGN KEY (`order_id`)
    REFERENCES `studio`.`order` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `mo_material_name_idx`
    FOREIGN KEY (`material_name`)
    REFERENCES `studio`.`material` (`name`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `studio`.`hardware_order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `studio`.`hardware_order` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `quantity` INT NOT NULL,
  `hardware_name` VARCHAR(45) NOT NULL,
  `order_id` INT NOT NULL,
  INDEX `ho_hardware_name_idx` (`hardware_name` ASC) VISIBLE,
  INDEX `ho_order_id_idx` (`order_id` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  CONSTRAINT `ho_hardware_name_idx`
    FOREIGN KEY (`hardware_name`)
    REFERENCES `studio`.`hardware` (`name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `ho_order_id_idx`
    FOREIGN KEY (`order_id`)
    REFERENCES `studio`.`order` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `studio` ;

-- -----------------------------------------------------
-- procedure orderPrice
-- -----------------------------------------------------

DELIMITER $$
USE `studio`$$
CREATE PROCEDURE `orderPrice`(orderID INT)
BEGIN
	DECLARE priceMaterial DECIMAL(10,2);
	DECLARE priceHardware DECIMAL(10,2);
    DECLARE priceToC DECIMAL(10,2);
    DECLARE price DECIMAL(10,2);
    
    SET priceMaterial = (SELECT sum(material.price * material_order.quantity) 
						FROM material 
						RIGHT JOIN material_order
						ON material_order.material_name = material.name
                        WHERE material_order.order_id = orderID);
                        
	SET priceHardware = (SELECT sum(hardware.price * hardware_order.quantity) 
						FROM hardware 
						RIGHT JOIN hardware_order
						ON hardware_order.hardware_name = hardware.name
                        WHERE hardware_order.order_id = orderID);
                        
    SET priceToC = (SELECT toc.price FROM typeofcloth toc
		WHERE toc.name = (
			SELECT ord.typeofcloth_name FROM studio.order ord
				WHERE ord.id = orderID));
    
	SET price = IFNULL(priceToC, 0) + IFNULL(priceHardware, 0) + IFNULL(priceMaterial, 0);
SELECT price;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure orderProfit
-- -----------------------------------------------------

DELIMITER $$
USE `studio`$$
CREATE PROCEDURE `orderProfit`(orderID INT)
BEGIN
	SELECT price FROM studio.typeofcloth
	WHERE name = (SELECT typeofcloth_name FROM studio.order
					WHERE id = orderID);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure orderProfitDate
-- -----------------------------------------------------

DELIMITER $$
USE `studio`$$
CREATE PROCEDURE `orderProfitDate`(dateI DATE)
BEGIN
	SELECT sum(typeofcloth.price) FROM studio.order ord
	RIGHT JOIN typeofcloth
	ON typeofcloth.name = ord.typeofcloth_name
	WHERE ord.date = dateI;
END$$

DELIMITER ;
USE `studio`;

DELIMITER $$
USE `studio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `studio`.`material_order_AFTER_INSERT` AFTER INSERT ON `material_order` FOR EACH ROW
BEGIN
	UPDATE material SET quantity = quantity - new.quantity
    WHERE name = new.material_name;
END$$

USE `studio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `studio`.`material_order_AFTER_UPDATE` AFTER UPDATE ON `material_order` FOR EACH ROW
BEGIN
	UPDATE material SET quantity = quantity - (new.quantity - old.quantity)
    WHERE name = new.material_name;
END$$

USE `studio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `studio`.`hardware_order_AFTER_INSERT` AFTER INSERT ON `hardware_order` FOR EACH ROW
BEGIN
	UPDATE hardware SET quantity = quantity - new.quantity
    WHERE name = new.hardware_name;
END$$

USE `studio`$$
CREATE DEFINER = CURRENT_USER TRIGGER `studio`.`hardware_order_AFTER_UPDATE` AFTER UPDATE ON `hardware_order` FOR EACH ROW
BEGIN
	UPDATE hardware SET quantity = quantity - (new.quantity - old.quantity)
    WHERE name = new.hardware_name;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
